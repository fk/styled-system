(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{138:function(e,n,a){"use strict";a.r(n);var t=a(4),o=a.n(t),s=a(0),m=a.n(s),p=a(1);n.default=function(e){var n=e.components;o()(e,["components"]);return m.a.createElement(p.MDXTag,{name:"wrapper",components:n},m.a.createElement(p.MDXTag,{name:"h1",components:n,props:{id:"responsive-styles"}},"Responsive Styles"),m.a.createElement(p.MDXTag,{name:"p",components:n},"Often when working on responsive layouts, it's useful to adjust styles across a singular dimension â€“\nsuch as font-size, margin, padding, and width.\nInstead of manually managing media queries and adding nested style objects throughout a code base,\nstyled-system offers a convenient shorthand syntax for adding responsive styles with a mobile-first approach.\nWhile this syntax can seem odd at first, it can become a powerful way to manage responsive typography and layouts."),m.a.createElement(p.MDXTag,{name:"p",components:n},"All style utilities add props that accept arrays as values for mobile-first responsive styles."),m.a.createElement(p.MDXTag,{name:"pre",components:n},m.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"<Box\n  width={[\n    1,    // 100% below the smallest breakpoint\n    1/2,  // 50% from the next breakpoint and up\n    1/4   // 25% from the next breakpoint and up\n  ]}\n/>\n\n// responsive font size\n<Box fontSize={[ 1, 2, 3, 4 ]} />\n\n// responsive margin\n<Box m={[ 1, 2, 3, 4 ]} />\n\n// responsive padding\n<Box p={[ 1, 2, 3, 4 ]} />\n")),m.a.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"using-objects"}},"Using objects"),m.a.createElement(p.MDXTag,{name:"p",components:n},"Alternatively you can define your breakpoints as an ",m.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"object")," e.g."),m.a.createElement(p.MDXTag,{name:"pre",components:n},m.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"// theme.js\nexport default {\n  breakpoints: {\n    sm: 0,    // zero represents the default (for mobile-first approach)\n    md: '48em',\n    lg: '80em'\n  }\n}\n")),m.a.createElement(p.MDXTag,{name:"p",components:n},"And then pass an ",m.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"object")," to configure how the component should respond at these breakpoints:"),m.a.createElement(p.MDXTag,{name:"pre",components:n},m.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"<Box\n  width={{\n    sm: 1,    // 100% by default (no media query)\n    md: 1/2,  // 50% at 'md' (48em and up)\n    lg: 1/4   // 25% at 'lg' (80em and up)\n  }}\n/>\n")),m.a.createElement(p.MDXTag,{name:"p",components:n},"Note: it isn't necessary to set a value for each breakpoint. The following would only apply 50% width at the ",m.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"md")," breakpoint:"),m.a.createElement(p.MDXTag,{name:"pre",components:n},m.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"<Box width={{ md: 1/2 }} />\n")))}}}]);