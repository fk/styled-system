(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{140:function(e,n,a){"use strict";a.r(n);var t=a(4),o=a.n(t),m=a(0),c=a.n(m),p=a(1);n.default=function(e){var n=e.components;o()(e,["components"]);return c.a.createElement(p.MDXTag,{name:"wrapper",components:n},c.a.createElement(p.MDXTag,{name:"h1",components:n,props:{id:"theming"}},"Theming"),c.a.createElement(p.MDXTag,{name:"p",components:n},"One of the core features of Styled System is the ability to quickly reference values defined in a theme in your components' props.\nInstead of hard-coding values or importing a theme into other components,\nStyled System props hook directly into React context-based themes."),c.a.createElement(p.MDXTag,{name:"p",components:n},"Given the following colors in a theme:"),c.a.createElement(p.MDXTag,{name:"pre",components:n},c.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"const colors = {\n  blue: '#07c',\n}\n\nexport default {\n  colors,\n}\n")),c.a.createElement(p.MDXTag,{name:"p",components:n},"A component with ",c.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"color")," props can pick up the ",c.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"blue")," value:"),c.a.createElement(p.MDXTag,{name:"pre",components:n},c.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"<Box color='blue' />\n")))}}}]);